template <class FlowFieldType>
FieldIterator<FlowFieldType>::FieldIterator(FlowFieldType& flowField, const Parameters& parameters, Stencils::FieldStencil<FlowFieldType>& stencil, int lowOffset, int highOffset):
  Iterator<FlowFieldType>(flowField, parameters),
  stencil_(stencil),
  lowOffset_(lowOffset),
  highOffset_(highOffset) {}

template <class FlowFieldType>
void FieldIterator<FlowFieldType>::iterate() {
  const int cellsX = Iterator<FlowFieldType>::flowField_.getCellsX();
  const int cellsY = Iterator<FlowFieldType>::flowField_.getCellsY();
  const int cellsZ = Iterator<FlowFieldType>::flowField_.getCellsZ();
  // The index k can be used for the 2D and 3D cases.

  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 2) {
    // Loop without lower boundaries. These will be dealt with by the global boundary stencils
    // or by the subdomain boundary iterators.
    for (int j = 1 + lowOffset_; j < cellsY - 1 + highOffset_; j++) {
      for (int i = 1 + lowOffset_; i < cellsX - 1 + highOffset_; i++) {
        stencil_.apply(Iterator<FlowFieldType>::flowField_, i, j);
      }
    }
  }

  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    for (int k = 1 + lowOffset_; k < cellsZ - 1 + highOffset_; k++) {
      for (int j = 1 + lowOffset_; j < cellsY - 1 + highOffset_; j++) {
        for (int i = 1 + lowOffset_; i < cellsX - 1 + highOffset_; i++) {
          stencil_.apply(Iterator<FlowFieldType>::flowField_, i, j, k);
        }
      }
    }
  }
}

template <class FlowFieldType>
GlobalBoundaryIterator<FlowFieldType>::GlobalBoundaryIterator(
  FlowFieldType& flowField, const Parameters& parameters, Stencils::BoundaryStencil<FlowFieldType>& stencil, int lowOffset, int highOffset
):
  Iterator<FlowFieldType>(flowField, parameters),
  lowOffset_(lowOffset),
  highOffset_(highOffset),
  leftWallStencil_(stencil),
  rightWallStencil_(stencil),
  bottomWallStencil_(stencil),
  topWallStencil_(stencil),
  frontWallStencil_(stencil),
  backWallStencil_(stencil) {}

template <class FlowFieldType>
GlobalBoundaryIterator<FlowFieldType>::GlobalBoundaryIterator(
  FlowFieldType&                            flowField,
  const Parameters&                         parameters,
  Stencils::BoundaryStencil<FlowFieldType>& leftWallStencil,
  Stencils::BoundaryStencil<FlowFieldType>& rightWallStencil,
  Stencils::BoundaryStencil<FlowFieldType>& bottomWallStencil,
  Stencils::BoundaryStencil<FlowFieldType>& topWallStencil,
  int                                       lowOffset,
  int                                       highOffset
):
  Iterator<FlowFieldType>(flowField, parameters),
  lowOffset_(lowOffset),
  highOffset_(highOffset),
  leftWallStencil_(leftWallStencil),
  rightWallStencil_(rightWallStencil),
  bottomWallStencil_(bottomWallStencil),
  topWallStencil_(topWallStencil)
  // This is plain bad, but it will work. The references had to be initialized somehow.
  ,
  frontWallStencil_(leftWallStencil),
  backWallStencil_(leftWallStencil) {

  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    throw std::runtime_error("Trying to use 2D constructor for a 3D field");
  }
}

template <class FlowFieldType>
GlobalBoundaryIterator<FlowFieldType>::GlobalBoundaryIterator(
  FlowFieldType&                            flowField,
  const Parameters&                         parameters,
  Stencils::BoundaryStencil<FlowFieldType>& leftWallStencil,
  Stencils::BoundaryStencil<FlowFieldType>& rightWallStencil,
  Stencils::BoundaryStencil<FlowFieldType>& bottomWallStencil,
  Stencils::BoundaryStencil<FlowFieldType>& topWallStencil,
  Stencils::BoundaryStencil<FlowFieldType>& frontWallStencil,
  Stencils::BoundaryStencil<FlowFieldType>& backWallStencil,
  int                                       lowOffset,
  int                                       highOffset
):
  Iterator<FlowFieldType>(flowField, parameters),
  lowOffset_(lowOffset),
  highOffset_(highOffset),
  leftWallStencil_(leftWallStencil),
  rightWallStencil_(rightWallStencil),
  bottomWallStencil_(bottomWallStencil),
  topWallStencil_(topWallStencil),
  frontWallStencil_(frontWallStencil),
  backWallStencil_(backWallStencil) {}

template <class FlowFieldType>
void GlobalBoundaryIterator<FlowFieldType>::iterate() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 2) {
    if (Iterator<FlowFieldType>::parameters_.parallel.bottomNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        bottomWallStencil_.applyBottomWall(Iterator<FlowFieldType>::flowField_, i, lowOffset_);
      }
    }
    if (Iterator<FlowFieldType>::parameters_.parallel.leftNb < 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        leftWallStencil_.applyLeftWall(Iterator<FlowFieldType>::flowField_, lowOffset_, j);
      }
    }
    if (Iterator<FlowFieldType>::parameters_.parallel.topNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        topWallStencil_.applyTopWall(Iterator<FlowFieldType>::flowField_, i, Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_ - 1);
      }
    }
    if (Iterator<FlowFieldType>::parameters_.parallel.rightNb < 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        rightWallStencil_.applyRightWall(Iterator<FlowFieldType>::flowField_, Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_ - 1, j);
      }
    }
  }

  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.leftNb < 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          leftWallStencil_.applyLeftWall(Iterator<FlowFieldType>::flowField_, lowOffset_, j, k);
        }
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.rightNb < 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          rightWallStencil_.applyRightWall(Iterator<FlowFieldType>::flowField_, Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_ - 1, j, k);
        }
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.bottomNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          bottomWallStencil_.applyBottomWall(Iterator<FlowFieldType>::flowField_, i, lowOffset_, k);
        }
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.topNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          topWallStencil_.applyTopWall(Iterator<FlowFieldType>::flowField_, i, Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_ - 1, k);
        }
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.frontNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
          frontWallStencil_.applyFrontWall(Iterator<FlowFieldType>::flowField_, i, j, lowOffset_);
        }
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.backNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
          backWallStencil_.applyBackWall(Iterator<FlowFieldType>::flowField_, i, j, Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_ - 1);
        }
      }
    }
  }
}

// NEW iterate() methods for global boundary iterator, that iterate only on one side of the domain

template <class FlowFieldType>
void GlobalBoundaryIterator<FlowFieldType>::iterateLeft() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 2) {
    if (Iterator<FlowFieldType>::parameters_.parallel.leftNb < 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        leftWallStencil_.applyLeftWall(Iterator<FlowFieldType>::flowField_, lowOffset_, j);
      }
    }
  }
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.leftNb < 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          leftWallStencil_.applyLeftWall(Iterator<FlowFieldType>::flowField_, lowOffset_, j, k);
        }
      }
    }
  }
}

template <class FlowFieldType>
void GlobalBoundaryIterator<FlowFieldType>::iterateRight() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 2) {
    if (Iterator<FlowFieldType>::parameters_.parallel.rightNb < 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        rightWallStencil_.applyRightWall(Iterator<FlowFieldType>::flowField_, Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_ - 1, j);
      }
    }
  }
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.rightNb < 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          rightWallStencil_.applyRightWall(Iterator<FlowFieldType>::flowField_, Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_ - 1, j, k);
        }
      }
    }
  }
}

template <class FlowFieldType>
void GlobalBoundaryIterator<FlowFieldType>::iterateTop() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 2) {
    if (Iterator<FlowFieldType>::parameters_.parallel.topNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        topWallStencil_.applyTopWall(Iterator<FlowFieldType>::flowField_, i, Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_ - 1);
      }
    }
  }
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.topNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          topWallStencil_.applyTopWall(Iterator<FlowFieldType>::flowField_, i, Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_ - 1, k);
        }
      }
    }
  }
}

template <class FlowFieldType>
void GlobalBoundaryIterator<FlowFieldType>::iterateBottom() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 2) {
    if (Iterator<FlowFieldType>::parameters_.parallel.bottomNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        bottomWallStencil_.applyBottomWall(Iterator<FlowFieldType>::flowField_, i, lowOffset_);
      }
    }
  }
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.bottomNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          bottomWallStencil_.applyBottomWall(Iterator<FlowFieldType>::flowField_, i, lowOffset_, k);
        }
      }
    }
  }
}

template <class FlowFieldType>
void GlobalBoundaryIterator<FlowFieldType>::iterateFront() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.frontNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
          frontWallStencil_.applyFrontWall(Iterator<FlowFieldType>::flowField_, i, j, lowOffset_);
        }
      }
    }
  }
}

template <class FlowFieldType>
void GlobalBoundaryIterator<FlowFieldType>::iterateBack() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.backNb < 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
          backWallStencil_.applyBackWall(Iterator<FlowFieldType>::flowField_, i, j, Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_ - 1);
        }
      }
    }
  }
}


template <class FlowFieldType>
ParallelBoundaryIterator<FlowFieldType>::ParallelBoundaryIterator(
  FlowFieldType& flowField, const Parameters& parameters, Stencils::BufferStencil& stencil, int lowOffset, int highOffset
):
  Iterator<FlowFieldType>(flowField, parameters),
  stencil_(stencil),
  lowOffset_(lowOffset),
  highOffset_(highOffset) {}

template <class FlowFieldType>
void ParallelBoundaryIterator<FlowFieldType>::iterate() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 2) {
    if (Iterator<FlowFieldType>::parameters_.parallel.bottomNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        stencil_.applyBottomWall(i, lowOffset_);
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.leftNb >= 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        stencil_.applyLeftWall(lowOffset_, j);
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.topNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        stencil_.applyTopWall(i, Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_ - 1);
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.rightNb >= 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        stencil_.applyRightWall(Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_ - 1, j);
      }
    }
  }

  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.leftNb >= 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          stencil_.applyLeftWall(lowOffset_, j, k);
        }
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.rightNb >= 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          stencil_.applyRightWall(Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_ - 1, j, k);
        }
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.bottomNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          stencil_.applyBottomWall(i, lowOffset_, k);
        }
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.topNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          stencil_.applyTopWall(i, Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_ - 1, k);
        }
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.frontNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
          stencil_.applyFrontWall(i, j, lowOffset_);
        }
      }
    }

    if (Iterator<FlowFieldType>::parameters_.parallel.backNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
          stencil_.applyBackWall(i, j, Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_ - 1);
        }
      }
    }
  }
}
/// NEW iterate() methods ///
template <class FlowFieldType>
void ParallelBoundaryIterator<FlowFieldType>::iterateLeft() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 2) {
    if (Iterator<FlowFieldType>::parameters_.parallel.leftNb >= 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        stencil_.applyLeftWall(lowOffset_, j);
      }
    }
  }

  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.leftNb >= 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          stencil_.applyLeftWall(lowOffset_, j, k);
        }
      }
    }
  }
}

template <class FlowFieldType>
void ParallelBoundaryIterator<FlowFieldType>::iterateRight() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 2) {
    if (Iterator<FlowFieldType>::parameters_.parallel.rightNb >= 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        stencil_.applyRightWall(Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_ - 1, j);
      }
    }
  }

  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.rightNb >= 0) {
      for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          stencil_.applyRightWall(Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_ - 1, j, k);
        }
      }
    }
  }
}

template <class FlowFieldType>
void ParallelBoundaryIterator<FlowFieldType>::iterateBottom() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 2) {
    if (Iterator<FlowFieldType>::parameters_.parallel.bottomNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        stencil_.applyBottomWall(i, lowOffset_);
      }
    }
  }

  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.bottomNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          stencil_.applyBottomWall(i, lowOffset_, k);
        }
      }
    }
  }
}

template <class FlowFieldType>
void ParallelBoundaryIterator<FlowFieldType>::iterateTop() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 2) {
    if (Iterator<FlowFieldType>::parameters_.parallel.topNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        stencil_.applyTopWall(i, Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_ - 1);
      }
    }
  }

  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.topNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int k = lowOffset_; k < Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_; k++) {
          stencil_.applyTopWall(i, Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_ - 1, k);
        }
      }
    }
  }
}

template <class FlowFieldType>
void ParallelBoundaryIterator<FlowFieldType>::iterateBack() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.backNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
          stencil_.applyBackWall(i, j, Iterator<FlowFieldType>::flowField_.getCellsZ() + highOffset_ - 1);
        }
      }
    }
  }
}

template <class FlowFieldType>
void ParallelBoundaryIterator<FlowFieldType>::iterateFront() {
  if (Iterator<FlowFieldType>::parameters_.geometry.dim == 3) {
    if (Iterator<FlowFieldType>::parameters_.parallel.frontNb >= 0) {
      for (int i = lowOffset_; i < Iterator<FlowFieldType>::flowField_.getCellsX() + highOffset_; i++) {
        for (int j = lowOffset_; j < Iterator<FlowFieldType>::flowField_.getCellsY() + highOffset_; j++) {
          stencil_.applyFrontWall(i, j, lowOffset_);
        }
      }
    }
  }
}